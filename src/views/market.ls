m = require \mithril
demo-data = require \../demo-data
Chart = require 'chart.js'
slider = require \polythene/slider/slider
require '../candle-chart'

window.Chart = Chart

state = {
    startSlider: demo-data[demo-data.length - 30].date
    endSlider: demo-data[demo-data.length - 1].date
}

mySlider = m.component slider,
    min: demo-data[0].date,
    max: demo-data[demo-data.length - 1].date,
    value: state.endSlider,
    step: 1
    class:'end-slider'
    getValue:(value)->
        if not @created
            @created = true
            return
        if @timeout
            clearTimeout @timeout

        Market.vm.chart-filter.end-date = value
        state.endSlider = value
        
        @timeout = setTimeout ->
            Market.vm.update-chart!
        ,300

    

startSlider = m.component slider,
    min: demo-data[0].date,
    max: demo-data[demo-data.length - 1].date,
    value: state.startSlider or demo-data[0].date,
    step: 1
    class:'start-slider'
    getValue:(value)->
        if not @created
            @created = true
            return
        if @timeout
            clearTimeout @timeout

        state.startSlider = value

        Market.vm.chart-filter.start-date = value
        @timeout = setTimeout ->
            Market.vm.update-chart!
        ,300


App = require \../components/app



const Market = {}

Market.controller = ->

    Market.vm.init!


Market.view = ->
    m.component App,
        m '#market-view', [
            m 'canvas.#chart', config: configureChart
            mySlider
            startSlider
        ]

Market.vm = 
    chart: null
    init: ->
    
    chart-filter: {
        startDate: state.startSlider
        endDate: state.endSlider
    }
    update-chart:->
        newData = createChartData demo-data

        @chart?.data.labels = newData.labels 
        @chart?.data.datasets = newData.datasets 
        @chart?.update!
    init-chart:->
        Market.vm.chart = new Chart document.getElementById('chart').getContext("2d"),
            type: 'bar'
            data: createChartData demo-data
            
            options: 
                animation:
                    animateScale:false
                    duration: 0
                responsive: true
                maintainAspectRatio: false
                scales: {
                    yAxes: [{
                        # beforeDataLimits:->
                        #     console.log it.max, 'really'
                        ticks: {
                            # max: 400,
                            # min: 0,
                            # stepSize: 100
                            # beginAtZero:true
                            # callback: (value, index, values)->
                            #     console.log index, values
                                # values = [1,2,3]
                                # value
                        }
                    }]
                    xAxes: [
                        ticks:
                            display:false
                    ]
                }

    

            

configureChart = (el,isInit,context)->
    context.retain = true
    if !isInit and !Market.vm.chart
        Market.vm.init-chart!

    if !isInit
        window.addEventListener 'orientationchange', ->
            setTimeout ->
                Market.vm.chart.resize!
            ,10
    else
        context.onunload = ->
            window.removeEventListener 'orientationchange'
        
        
                
window.Market = Market

        # ---
        # generated by js2coffee 2.2.0

module.exports = Market


function createChartData (data)
    datasets = []
    volumeData = []
    priceData = []
    labels = []
    for dat in data
        if Market.vm.chart-filter.start-date > dat.date
            continue
        if Market.vm.chart-filter.end-date < dat.date
            continue

        labels.push moment.unix(dat.date).format('DD.MM')
        volumeData.push dat.volume
        priceData.push [ dat.low, dat.high, dat.open, dat.close ]
    datasets.push {
        label: 'Price'

        backgroundColor: 'rgba(255,99,132,0.2)'
        borderColor: 'rgba(255,99,132,1)'
        borderWidth: 1
        hoverBackgroundColor: 'rgba(255,99,132,0.4)'
        hoverBorderColor: 'rgba(255,99,132,1)'
        data: priceData
        beforeDataLimits:->
            console.log 'asdakjshd'
    }
    # datasets.push {
    #     label: 'Volume'
    #     backgroundColor: 'grey'
    #     borderColor: 'grey'
    #     borderWidth: 1
    #     hoverBackgroundColor: 'rgba(255,99,132,0.4)'
    #     hoverBorderColor: 'rgba(255,99,132,1)'
    #     data: volumeData
    # }
    

    return {
        labels: labels
        datasets: datasets
    }
