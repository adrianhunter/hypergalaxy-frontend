// Generated by LiveScript 1.5.0
var m, demoData, Chart, slider, state, mySlider, startSlider, App, Market, configureChart;
m = require('mithril');
demoData = require('../demo-data');
Chart = require('chart.js');
slider = require('polythene/slider/slider');
require('../candle-chart');
window.Chart = Chart;
state = {
  startSlider: demoData[demoData.length - 30].date,
  endSlider: demoData[demoData.length - 1].date
};
mySlider = m.component(slider, {
  min: demoData[0].date,
  max: demoData[demoData.length - 1].date,
  value: state.endSlider,
  step: 1,
  'class': 'end-slider',
  getValue: function(value){
    if (!this.created) {
      this.created = true;
      return;
    }
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    Market.vm.chartFilter.endDate = value;
    state.endSlider = value;
    return this.timeout = setTimeout(function(){
      return Market.vm.updateChart();
    }, 300);
  }
});
startSlider = m.component(slider, {
  min: demoData[0].date,
  max: demoData[demoData.length - 1].date,
  value: state.startSlider || demoData[0].date,
  step: 1,
  'class': 'start-slider',
  getValue: function(value){
    if (!this.created) {
      this.created = true;
      return;
    }
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
    state.startSlider = value;
    Market.vm.chartFilter.startDate = value;
    return this.timeout = setTimeout(function(){
      return Market.vm.updateChart();
    }, 300);
  }
});
App = require('../components/app');
Market = {};
Market.controller = function(){
  return Market.vm.init();
};
Market.view = function(){
  return m.component(App, m('#market-view', [
    m('canvas.#chart', {
      config: configureChart
    }), mySlider, startSlider
  ]));
};
Market.vm = {
  chart: null,
  init: function(){},
  chartFilter: {
    startDate: state.startSlider,
    endDate: state.endSlider
  },
  updateChart: function(){
    var newData, ref$, ref1$, ref2$;
    newData = createChartData(demoData);
    if ((ref$ = this.chart) != null) {
      ref$.data.labels = newData.labels;
    }
    if ((ref1$ = this.chart) != null) {
      ref1$.data.datasets = newData.datasets;
    }
    return (ref2$ = this.chart) != null ? ref2$.update() : void 8;
  },
  initChart: function(){
    return Market.vm.chart = new Chart(document.getElementById('chart').getContext("2d"), {
      type: 'bar',
      data: createChartData(demoData),
      options: {
        animation: {
          animateScale: false,
          duration: 0
        },
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          yAxes: [{
            ticks: {}
          }],
          xAxes: [{
            ticks: {
              display: false
            }
          }]
        }
      }
    });
  }
};
configureChart = function(el, isInit, context){
  context.retain = true;
  if (!isInit && !Market.vm.chart) {
    Market.vm.initChart();
  }
  if (!isInit) {
    return window.addEventListener('orientationchange', function(){
      return setTimeout(function(){
        return Market.vm.chart.resize();
      }, 10);
    });
  } else {
    return context.onunload = function(){
      return window.removeEventListener('orientationchange');
    };
  }
};
window.Market = Market;
module.exports = Market;
function createChartData(data){
  var datasets, volumeData, priceData, labels, i$, len$, dat;
  datasets = [];
  volumeData = [];
  priceData = [];
  labels = [];
  for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
    dat = data[i$];
    if (Market.vm.chartFilter.startDate > dat.date) {
      continue;
    }
    if (Market.vm.chartFilter.endDate < dat.date) {
      continue;
    }
    labels.push(moment.unix(dat.date).format('DD.MM'));
    volumeData.push(dat.volume);
    priceData.push([dat.low, dat.high, dat.open, dat.close]);
  }
  datasets.push({
    label: 'Price',
    backgroundColor: 'rgba(255,99,132,0.2)',
    borderColor: 'rgba(255,99,132,1)',
    borderWidth: 1,
    hoverBackgroundColor: 'rgba(255,99,132,0.4)',
    hoverBorderColor: 'rgba(255,99,132,1)',
    data: priceData,
    beforeDataLimits: function(){
      return console.log('asdakjshd');
    }
  });
  return {
    labels: labels,
    datasets: datasets
  };
}